// -*- c++ -*-

// code guard
#if !defined(pyre_cuda_memory_DeviceMapped_icc)
#error this file contains implementation details for pyre::cuda::memory::DeviceMapped
#else

// metamethods
// constructor
template <class T, bool isConst>
pyre::cuda::memory::DeviceMapped<T, isConst>::DeviceMapped(
    pointer HostSpot) // for mapped memory only a pointer to the spot on host memory is needed,
                      // therefore no initialization with a nullptr
{
    // set the device pointer to the start of the host memory spot
    auto status = cudaHostGetDevicePointer(&_device_data, HostSpot, 0);
    // if something went wrong
    if (status != cudaSuccess) {
        // make a channel
        pyre::journal::error_t error("pyre.cuda");
        // complain
        error << "while setting device pointer to " << HostSpot << " : " << pyre::journal::newline
              << cudaGetErrorName(status) << " (" << status << ")" << pyre::journal::endl(__HERE__);
        // and bail
        throw std::bad_alloc();
    }

    // all went well
    pyre::journal::debug_t channel("pyre.cuda.mapped_t");
    // so let me know
    channel << "set device pointer to  " << HostSpot << " at " << (void *) _device_data
            << pyre::journal::endl(__HERE__);
}

// interface
// access to the device data pointer
template <class T, bool isConst>
auto
pyre::cuda::memory::DeviceMapped<T, isConst>::device_data() const -> pointer
{
    // return the raw data pointer
    return _device_data;
}

#endif

// end of file
